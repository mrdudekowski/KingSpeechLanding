/**
 * Simple Theme Manager - Simplified version for debugging
 * @class SimpleThemeManager
 */
class SimpleThemeManager {
  constructor() {
    this.theme = 'light';
    this.themeToggle = null;
    console.log('üöÄ SimpleThemeManager constructor called');
    this.init();
  }

  /**
   * Initialize theme manager
   */
  init() {
    console.log('üîß SimpleThemeManager init() called');
    this.detectInitialTheme();
    this.setupThemeToggle();
    this.applyTheme(this.theme);
    this.updateToggleState();
    console.log('‚úÖ SimpleThemeManager initialized');
  }

  /**
   * Detect initial theme
   */
  detectInitialTheme() {
    console.log('üîç Detecting initial theme...');
    const savedTheme = localStorage.getItem('kingspeech-theme');
    const htmlHasDarkClass = document.documentElement.classList.contains('dark');
    
    if (savedTheme && ['light', 'dark'].includes(savedTheme)) {
      this.theme = savedTheme;
      console.log(`üì± Using saved theme: ${savedTheme}`);
    } else if (htmlHasDarkClass) {
      this.theme = 'dark';
      console.log('üåô Using HTML dark class theme');
    } else {
      this.theme = 'light';
      console.log('‚òÄÔ∏è Using default light theme');
    }
  }

  /**
   * Setup theme toggle button
   */
  setupThemeToggle() {
    console.log('üéØ Setting up theme toggle...');
    this.themeToggle = document.querySelector('[data-theme-toggle]');
    console.log('üîç Theme toggle button found:', this.themeToggle);
    
    if (this.themeToggle) {
      this.themeToggle.addEventListener('click', (e) => {
        console.log('üéØ Theme toggle clicked!');
        e.preventDefault();
        this.toggleTheme();
      });
      console.log('‚úÖ Theme toggle event listener added');
    } else {
      console.error('‚ùå Theme toggle button not found!');
    }
  }

  /**
   * Toggle between light and dark themes
   */
  toggleTheme() {
    const newTheme = this.theme === 'light' ? 'dark' : 'light';
    console.log(`üîÑ Toggling theme from ${this.theme} to ${newTheme}`);
    
    this.setTheme(newTheme);
  }

  /**
   * Set specific theme
   */
  setTheme(theme) {
    if (!['light', 'dark'].includes(theme)) {
      console.warn(`Invalid theme: ${theme}`);
      return;
    }

    console.log(`üé® Setting theme to: ${theme}`);
    this.theme = theme;
    this.applyTheme(theme);
    this.saveTheme(theme);
    this.updateToggleState();
  }

  /**
   * Apply theme to document
   */
  applyTheme(theme) {
    console.log(`üéØ Applying theme: ${theme}`);
    
    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
      console.log('‚úÖ Added "dark" class to html element');
    } else {
      document.documentElement.classList.remove('dark');
      console.log('‚úÖ Removed "dark" class from html element');
    }
  }

  /**
   * Save theme preference
   */
  saveTheme(theme) {
    localStorage.setItem('kingspeech-theme', theme);
    console.log(`üíæ Saved theme to localStorage: ${theme}`);
  }

  /**
   * Update toggle button state
   */
  updateToggleState() {
    if (this.themeToggle) {
      this.themeToggle.setAttribute('aria-pressed', String(this.theme === 'dark'));
      this.themeToggle.setAttribute('title', 
        this.theme === 'dark' ? '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É' : '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ —Ç—ë–º–Ω—É—é —Ç–µ–º—É'
      );
      console.log(`üé® Theme toggle state updated: ${this.theme}`);
    }
  }

  /**
   * Get current theme
   */
  getCurrentTheme() {
    return this.theme;
  }
}

// Export for ES modules
export default SimpleThemeManager;
