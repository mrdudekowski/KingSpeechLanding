/**
 * GAS Integration Module
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Apps Script –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫ –≤ Telegram
 */

class GASIntegration {
  constructor() {
    this.config = {
      // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π URL GAS webhook
      GAS_WEBHOOK_URL: 'https://script.google.com/macros/s/YOUR_SCRIPT_ID/exec',
      
      // Fallback URL (–µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
      FALLBACK_URL: null,
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
      REQUEST: {
        timeout: 10000, // 10 —Å–µ–∫—É–Ω–¥
        retries: 2
      },
      
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      NOTIFICATIONS: {
        success: {
          title: '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!',
          message: '–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
        },
        error: {
          title: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏',
          message: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é.'
        },
        cors_error: {
          title: '–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º',
          message: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ GAS webhook.'
        }
      }
    };
    
    this.isHealthy = false;
    this.init();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
   */
  init() {
    console.log('üîó GAS Integration initialized');
    this.checkHealth();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ GAS webhook
   */
  async checkHealth() {
    try {
      const response = await fetch(this.config.GAS_WEBHOOK_URL, {
        method: 'GET',
        mode: 'cors',
        timeout: this.config.REQUEST.timeout
      });

      if (response.ok) {
        const data = await response.json();
        this.isHealthy = data.ok === true;
        console.log('‚úÖ GAS Webhook healthy:', data);
      } else {
        this.isHealthy = false;
        console.warn('‚ö†Ô∏è GAS Webhook unhealthy:', response.status);
      }
    } catch (error) {
      this.isHealthy = false;
      console.error('‚ùå GAS Webhook check failed:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ GAS webhook
   */
  async submitLead(formData) {
    try {
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ GAS...', formData);

      // –î–æ–±–∞–≤–ª—è–µ–º honeypot –ø–æ–ª–µ (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞)
      const dataWithHoneypot = {
        ...formData,
        website: '', // Honeypot - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º
        page: window.location.pathname,
        ref: document.referrer,
        utm_source: this.getUrlParameter('utm_source'),
        utm_medium: this.getUrlParameter('utm_medium'),
        utm_campaign: this.getUrlParameter('utm_campaign')
      };

      const response = await this.sendRequest(dataWithHoneypot);
      
      if (response.ok) {
        console.log('‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:', response);
        return {
          success: true,
          data: response.data,
          message: response.message
        };
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏:', response);
        return {
          success: false,
          error: response.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        };
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏:', error);
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
      };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞
   */
  async sendRequest(data, retryCount = 0) {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), this.config.REQUEST.timeout);
    
    try {
      const response = await fetch(this.config.GAS_WEBHOOK_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: this.encodeFormData(data),
        signal: controller.signal
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const result = await response.json();
      return result;

    } catch (error) {
      clearTimeout(timeoutId);
      
      // Retry logic
      if (retryCount < this.config.REQUEST.retries) {
        console.log(`üîÑ Retry ${retryCount + 1}/${this.config.REQUEST.retries}`);
        await this.delay(1000 * (retryCount + 1)); // Exponential backoff
        return this.sendRequest(data, retryCount + 1);
      }
      
      throw error;
    }
  }

  /**
   * –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
   */
  encodeFormData(data) {
    const params = new URLSearchParams();
    
    for (const [key, value] of Object.entries(data)) {
      if (value !== null && value !== undefined) {
        params.append(key, value.toString());
      }
    }
    
    return params.toString();
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
   */
  getUrlParameter(name) {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get(name) || '';
  }

  /**
   * –ó–∞–¥–µ—Ä–∂–∫–∞
   */
  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  showNotification(notification) {
    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notificationEl = document.createElement('div');
    notificationEl.className = `gas-notification ${notification.title.includes('–û—à–∏–±–∫–∞') ? 'error' : 'success'}`;
    notificationEl.innerHTML = `
      <div class="gas-notification__content">
        <h4>${notification.title}</h4>
        <p>${notification.message}</p>
      </div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
    if (!document.querySelector('#gas-notification-styles')) {
      const styles = document.createElement('style');
      styles.id = 'gas-notification-styles';
      styles.textContent = `
        .gas-notification {
          position: fixed;
          top: 20px;
          right: 20px;
          background: white;
          border-radius: 12px;
          box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
          padding: 20px;
          max-width: 400px;
          z-index: 10000;
          animation: slideIn 0.3s ease-out;
        }
        
        .gas-notification.success {
          border-left: 4px solid #10B981;
        }
        
        .gas-notification.error {
          border-left: 4px solid #EF4444;
        }
        
        .gas-notification__content h4 {
          margin: 0 0 8px 0;
          font-size: 16px;
          font-weight: 600;
        }
        
        .gas-notification__content p {
          margin: 0;
          font-size: 14px;
          color: #666;
        }
        
        @keyframes slideIn {
          from {
            transform: translateX(100%);
            opacity: 0;
          }
          to {
            transform: translateX(0);
            opacity: 1;
          }
        }
        
        html.dark .gas-notification {
          background: #1f2937;
          color: white;
        }
        
        html.dark .gas-notification__content p {
          color: #d1d5db;
        }
      `;
      document.head.appendChild(styles);
    }

    document.body.appendChild(notificationEl);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      notificationEl.style.animation = 'slideOut 0.3s ease-in';
      setTimeout(() => {
        if (notificationEl.parentNode) {
          notificationEl.parentNode.removeChild(notificationEl);
        }
      }, 300);
    }, 5000);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  async getStats() {
    try {
      const response = await fetch(this.config.GAS_WEBHOOK_URL, {
        method: 'GET',
        mode: 'cors'
      });

      if (response.ok) {
        const data = await response.json();
        return data.data?.stats || null;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
    return null;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export default GASIntegration;
